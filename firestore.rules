rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is admin of an item
    function isItemAdmin(itemData) {
      return isAuthenticated() && request.auth.uid in itemData.adminIds;
    }
    
    // Helper function to check if user is expert of an item
    function isItemExpert(itemData) {
      return isAuthenticated() && request.auth.uid in itemData.expertIds;
    }
    
    // Helper function to check if user is owner
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Rules for items collection (LEGACY - keep for backward compatibility)
    match /items/{itemId} {
      // Allow read if user is authenticated and is either admin or expert
      allow read: if isAuthenticated() && 
        (request.auth.uid in resource.data.adminIds || 
         request.auth.uid in resource.data.expertIds);
      
      // Allow create if user is authenticated and includes themselves as admin
      allow create: if isAuthenticated() && 
        request.auth.uid in request.resource.data.adminIds &&
        request.resource.data.keys().hasAll(['title', 'description', 'type', 'adminIds', 'expertIds', 'consensusThreshold', 'maxRounds', 'currentRound', 'status']);
      
      // Allow update if user is admin of the item
      allow update: if isItemAdmin(resource.data);
      
      // Allow delete if user is admin of the item
      allow delete: if isItemAdmin(resource.data);
    }
    
    // Rules for rounds collection
    match /rounds/{roundId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated();
      allow delete: if false; // Rounds should not be deleted
    }
    
    // Rules for responses collection (LEGACY)
    match /responses/{responseId} {
      // Experts can create and read their own responses
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.expertId;
      allow read: if isAuthenticated() && 
        request.auth.uid == resource.data.expertId;
      allow update: if false; // Responses should be immutable
      allow delete: if false; // Responses should not be deleted
    }
    
    // Rules for aggregations collection (read-only for most users)
    match /aggregations/{aggregationId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only cloud functions should write aggregations
    }
    
    // Helper function to check if user is admin of a panel
    function isPanelAdmin(panelData) {
      return isAuthenticated() && request.auth.uid in panelData.adminIds;
    }
    
    // Helper function to check if user is expert in a panel
    function isPanelExpert(panelData) {
      return isAuthenticated() && request.auth.uid in panelData.expertIds;
    }
    
    // NEW TOPICS SYSTEM RULES
    
    // Topics collection
    match /topics/{topicId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        resource.data.createdBy == request.auth.uid || 
        // Allow panel experts to update if they have access to the panel
        exists(/databases/$(database)/documents/panels/$(resource.data.panelId))
      );
      allow delete: if isAuthenticated() && resource.data.createdBy == request.auth.uid;
    }
    
    // Panels collection (UPDATED for new system)
    match /panels/{panelId} {
      // Allow read if user is authenticated
      allow read: if isAuthenticated();
      
      // Allow create if user is authenticated
      allow create: if isAuthenticated();
      
      // Allow update if user is creator or expert in the panel
      allow update: if isAuthenticated() && (
        resource.data.creatorId == request.auth.uid ||
        request.auth.uid in resource.data.expertIds ||
        // Legacy support for adminIds
        (resource.data.keys().hasAny(['adminIds']) && request.auth.uid in resource.data.adminIds)
      );
      
      // Allow delete if user is creator or admin
      allow delete: if isAuthenticated() && (
        resource.data.creatorId == request.auth.uid ||
        (resource.data.keys().hasAny(['adminIds']) && request.auth.uid in resource.data.adminIds)
      );
    }
    
    // Experts collection (UPDATED for new system)
    match /experts/{expertId} {
      // Allow read if user is authenticated
      allow read: if isAuthenticated();
      
      // Allow create if user is authenticated
      allow create: if isAuthenticated();
      
      // Allow update if user invited the expert, is the expert themselves, or email matches
      allow update: if isAuthenticated() && (
        resource.data.invitedBy == request.auth.uid ||
        resource.data.userId == request.auth.uid ||
        resource.data.email == request.auth.token.email ||
        // Legacy support for uid field
        (resource.data.keys().hasAny(['uid']) && request.auth.uid == resource.data.uid)
      );
      
      // Allow delete if user invited the expert or legacy uid match
      allow delete: if isAuthenticated() && (
        resource.data.invitedBy == request.auth.uid ||
        (resource.data.keys().hasAny(['uid']) && request.auth.uid == resource.data.uid)
      );
    }
    
    // Feedback collection (NEW)
    match /feedback/{feedbackId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        resource.data.expertId == request.auth.uid ||
        // Only allow voting updates by other users
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['voteCount', 'votedBy', 'updatedAt']))
      );
      allow delete: if isAuthenticated() && resource.data.expertId == request.auth.uid;
    }
    
    // Panel invitations collection (LEGACY - keep for backward compatibility)
    match /panelInvitations/{invitationId} {
      // Allow read if user is authenticated
      allow read: if isAuthenticated();
      
      // Allow create if user is admin of the panel being invited to
      allow create: if isAuthenticated() && 
        exists(/databases/$(database)/documents/panels/$(request.resource.data.panelId)) &&
        request.auth.uid in get(/databases/$(database)/documents/panels/$(request.resource.data.panelId)).data.adminIds;
      
      // Allow update only to accept/decline invitation
      allow update: if isAuthenticated() && 
        resource.data.status == 'pending' &&
        request.resource.data.status in ['accepted', 'declined'];
      
      // Allow delete if user is admin of the panel
      allow delete: if isAuthenticated() && 
        exists(/databases/$(database)/documents/panels/$(resource.data.panelId)) &&
        request.auth.uid in get(/databases/$(database)/documents/panels/$(resource.data.panelId)).data.adminIds;
    }
    
    // Users collection (for profile data)
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false; // Users should not be deleted
    }
  }
}