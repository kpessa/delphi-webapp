rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is admin of an item
    function isItemAdmin(itemData) {
      return isAuthenticated() && request.auth.uid in itemData.adminIds;
    }
    
    // Helper function to check if user is expert of an item
    function isItemExpert(itemData) {
      return isAuthenticated() && request.auth.uid in itemData.expertIds;
    }
    
    // Rules for items collection
    match /items/{itemId} {
      // Allow read if user is authenticated and is either admin or expert
      allow read: if isAuthenticated() && 
        (request.auth.uid in resource.data.adminIds || 
         request.auth.uid in resource.data.expertIds);
      
      // Allow create if user is authenticated and includes themselves as admin
      allow create: if isAuthenticated() && 
        request.auth.uid in request.resource.data.adminIds &&
        request.resource.data.keys().hasAll(['title', 'description', 'type', 'adminIds', 'expertIds', 'consensusThreshold', 'maxRounds', 'currentRound', 'status']);
      
      // Allow update if user is admin of the item
      allow update: if isItemAdmin(resource.data);
      
      // Allow delete if user is admin of the item
      allow delete: if isItemAdmin(resource.data);
    }
    
    // Rules for rounds collection
    match /rounds/{roundId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && 
        exists(/databases/$(database)/documents/items/$(request.resource.data.itemId)) &&
        request.auth.uid in get(/databases/$(database)/documents/items/$(request.resource.data.itemId)).data.adminIds;
      allow delete: if false; // Rounds should not be deleted
    }
    
    // Rules for responses collection
    match /responses/{responseId} {
      // Experts can create and read their own responses
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.expertId;
      allow read: if isAuthenticated() && 
        request.auth.uid == resource.data.expertId;
      allow update: if false; // Responses should be immutable
      allow delete: if false; // Responses should not be deleted
    }
    
    // Rules for aggregations collection (read-only for most users)
    match /aggregations/{aggregationId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only cloud functions should write aggregations
    }
    
    // Helper function to check if user is admin of a panel
    function isPanelAdmin(panelData) {
      return isAuthenticated() && request.auth.uid in panelData.adminIds;
    }
    
    // Helper function to check if user is expert in a panel
    function isPanelExpert(panelData) {
      return isAuthenticated() && request.auth.uid in panelData.expertIds;
    }
    
    // Rules for panels collection
    match /panels/{panelId} {
      // Allow read if user is authenticated
      allow read: if isAuthenticated();
      
      // Allow create if user is authenticated and includes themselves as admin
      allow create: if isAuthenticated() && 
        request.auth.uid in request.resource.data.adminIds &&
        request.resource.data.keys().hasAll(['name', 'description', 'adminIds', 'expertIds']);
      
      // Allow update if user is admin of the panel
      allow update: if isPanelAdmin(resource.data);
      
      // Allow delete if user is admin of the panel
      allow delete: if isPanelAdmin(resource.data);
    }
    
    // Rules for experts collection
    match /experts/{expertId} {
      // Allow read if user is authenticated
      allow read: if isAuthenticated();
      
      // Allow create if user is authenticated and creating their own expert record
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.uid &&
        request.resource.data.keys().hasAll(['uid', 'email', 'displayName', 'panelIds']);
      
      // Allow update if user is updating their own expert record
      allow update: if isAuthenticated() && 
        request.auth.uid == resource.data.uid;
      
      // Allow delete if user is deleting their own expert record
      allow delete: if isAuthenticated() && 
        request.auth.uid == resource.data.uid;
    }
    
    // Rules for panel invitations collection
    match /panelInvitations/{invitationId} {
      // Allow read if user is authenticated
      allow read: if isAuthenticated();
      
      // Allow create if user is admin of the panel being invited to
      allow create: if isAuthenticated() && 
        exists(/databases/$(database)/documents/panels/$(request.resource.data.panelId)) &&
        request.auth.uid in get(/databases/$(database)/documents/panels/$(request.resource.data.panelId)).data.adminIds;
      
      // Allow update only to accept/decline invitation
      allow update: if isAuthenticated() && 
        resource.data.status == 'pending' &&
        request.resource.data.status in ['accepted', 'declined'];
      
      // Allow delete if user is admin of the panel
      allow delete: if isAuthenticated() && 
        exists(/databases/$(database)/documents/panels/$(resource.data.panelId)) &&
        request.auth.uid in get(/databases/$(database)/documents/panels/$(resource.data.panelId)).data.adminIds;
    }
  }
}